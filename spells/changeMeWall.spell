#!/bin/bash
# Changes the wallpaper to a random one in the `$WALLPAPERS` folder.
# (requires `feh`).
set -e

show_help() {
    exe="$(basename "$0")"
    echo -e "Change wallpaper to a random one
    \e[36mUsage:\e[0m $exe [OPTIONS...] [Walllpaper...]
    \e[36mOptions:\e[0m
        -f filter
            Pick a wallpaper using grep over the filenames. Random matches will be picked
        -s
            Show an sxiv image picker. Mark the wallpapers with \`m\` and quit to set.
            \e[1mnote:\e[0m Overrides wallpapers passed as arguments.
        -w
            Force wide screen. Usefull when passing a wallpaper as parameter
        -l
            List walls instead of picking one

    \e[36mExamples:\e[0m
        Pick a random wallpaper
            $ $exe
        Choose a specific one
            $ $exe path/to/wall1 http://link/to/wall2 etc...
        Pick a random one that has a word in it's name
            $ $exe -f blue"
}
BRIGHTNESS_FILTER='
import sys
import colorsys
count = 0
outputs = 0
last_colors = ["#000000", "#000000", "#000000"]
print("Rejecting colours with s < 0.20 or v < 0.30", file=sys.stderr)
for line in sys.stdin:
    line = line.strip()
    og_line = str(line)
    if line.startswith("#"):
        line = line[1:]
    r = int(line[0:2], 16)
    g = int(line[2:4], 16)
    b = int(line[4:6], 16)
    hsv = colorsys.rgb_to_hsv(r / 255, g / 255, b / 255)
    count += 1
    if hsv[1] < 0.2 or hsv[2] < 0.3:
        print(
            "{:02d}:".format(count),
            og_line,
            f"r: {r}",
            f"g: {g}",
            f"b: {b}",
            "h: {:.2f} s: {:.2f} v: {:.2f}".format(*hsv),
            file=sys.stderr
        )
    else:
        outputs += 1
        print(og_line)
    last_colors.pop(0)
    last_colors.append(og_line)

if outputs < 3:
    for i in reversed(last_colors):
        print(i)
    print(
        "Not enough colors picked, resorting to most common",
        file=sys.stderr
    )
'
wide=0
while [ "$#" -gt 0 ]; do
    case "$1" in
        -f) # filter to pass to grep for wallpaper searching
            filter="$2"
            shift
            ;;
        -s)
            sxiv=1
            ;;
        -w)
            wide=1
            ;;
        -l)
            list_mode=1
            ;;
        -h | --help)
            show_help
            exit 1
            ;;
        -*)
            echo "Invalid option '$1'"
            exit 1
            ;;
        *)
            files+=("$1")
            ;;
    esac
    shift
done
if [ -n "$sxiv" ]; then
    mapfile -t files < <(sxiv -to "$WALLPAPERS")
elif [ "${#files[@]}" = 0 ]; then
    mapfile -t files < <(find "$WALLPAPERS" -type f |
        grep -v mtg |
        grep -iP "/[^/]*${filter}[^/]*$")
fi

if [ $list_mode ]; then
    printf "%s\n" "${files[@]}"
    exit 0
fi
mapfile -t files < <(
    printf "%s\n" "${files[@]}" |
        shuf -n "$(xrandr --query | grep ' connected' -c)" |
        grep -vP '^$'
)

i=1
for file in "${files[@]}"; do
    [ "$wide" -gt 0 ] && break
    if [[ "$file" = *wide* ]]; then
        wide=$i
    else
        aspect_ratio="$(convert "$file" -format '%[fx:w/h]' info:)"
        wide=$(echo "$aspect_ratio" | awk '$0 >= 2.5 {found=1}
                        END {if(found) {print '$i'} else {print "0"}}')
        [ "$wide" -gt 0 ] &&
            [[ "$file" != *wide* ]] &&
            echo "not wide set as wide: $file" >>~/CHANGE_WALL_WIDE_ERROR
        i=$((i + 1))
    fi
    set +x
done
unset i

[ "$wide" -gt 0 ] && files=("${files[$((wide - 1))]}")

if command -v bspc &>/dev/null; then
    mapfile -t colors < <(
        convert "${files[0]}" +dither -colors 10 histogram: |
            grep -aoP '[0-9][0-9][0-9]+:.*$' |
            grep -aoP '#[^ ].....' |
            python3 -c "$BRIGHTNESS_FILTER" |
            head -3
    )
    echo "Picking ${colors[*]}"

    bspc config focused_border_color "${colors[0]}"
    bspc config active_border_color "${colors[1]}"
    bspc config normal_border_color "${colors[2]}"
    bspc config presel_feedback_color "${colors[2]}"
    printf "%s\n" "${colors[@]}" >|/tmp/wall_colors
    command -V colo &>/dev/null &&
        printf "%s\n" "${colors[@]}" | colo textcolor >>/tmp/wall_colors
    if nmcli -t dev | grep ZON-2010 || [[ "$(hostname)" = tolaria ]]; then
        #shellcheck disable=2029
        [ -e /tmp/mood_light ] ||
            ssh mirrodin -o StrictHostKeyChecking=no \
                "python ~/bulb/color.py \\${colors[0]} check_flow"
    fi
fi 2>&1 | color_picker -f

printf "Setting: %s\n" "${files[@]}"

if [ "$wide" -gt 0 ]; then
    feh --no-fehbg --bg-fill --no-xinerama "${files[@]}"
else
    feh --no-fehbg --bg-fill "${files[@]}"
fi
wait

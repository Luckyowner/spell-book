#!/bin/bash
daemonise() { (
    # Close all but stdio
    local self=$BASHPID
    [[ "$1" = sxhkd ]] && find /proc/$self/fd -type l -printf '%f\n'
    # The following will even try to close the fd for the find sub
    # shell although it is already closed. (0: stdin, 1: stdout, 2:
    # stderr, 3: find)
    while read -r n; do
        if ((n > 2)); then
            [[ "$1" = sxhkd ]] && echo "closing $n"
            eval "exec $n>&-"
        fi
    done < <(find /proc/$self/fd -type l -printf '%f\n')
    "$@" &
); }

set -x
wmname LG3D
monitors=()
while read -r mon; do
    read -ra geometry < <(echo "$mon" | tr 'x+' ' ')
    echo "${geometry[@]}"
    if [[ "${geometry[2]}" != 0 ]]; then
        steps="$(( ( (geometry[2] - 1) / 1920) + 1 ))"
        monitors+=("${geometry[0]}x0+$(( steps * 1920))+0")
    else
        monitors+=("${geometry[0]}x0+0+0")
    fi
done < <(xrandr --listactivemonitors |
    sed 1d |
    cut -d' ' -f4 |
    sed -E 's|/[0-9]+||g' |
    sort -nt+ -k3)

case "${#monitors[@]}" in
    1)
        bspc monitor -d 1 2 3 4 5 6 7 8 9 0
        ;;
    2)
        case "$(hostname)" in
            tolaria)
                bspc monitor -o DVI-D-0 DVI-I-1
                bspc monitor ^1 -d 1 2 3 4
                bspc monitor ^2 -d 5 6 7 8 9 0
                ;;
            weatherlight | matess | kaladesh)
                bspc monitor ^1 -d 1 2 3 4 5
                bspc monitor ^2 -d 6 7 8 9 0
                ;;
            *)
                bspc monitor ^1 -d 1 2 3 4 5 6 7 8
                bspc monitor ^2 -d 9 0
                ;;
        esac
        ;;
    3)
        bspc monitor ^1 -d 1 2 3
        bspc monitor ^2 -d 4 5 6
        bspc monitor ^3 -d 7 8 9 0
        ;;
    4)
        bspc monitor ^1 -d 1
        bspc monitor ^2 -d 2 3 4
        bspc monitor ^3 -d 5 6 7
        bspc monitor ^4 -d 8 9 0
        ;;
esac

if [[ "$(hostname)" = tolaria ]]; then
    bspc config window_gap 7
    bspc config border_width 5
else
    bspc config window_gap 4
    bspc config border_width 3
fi

bspc config split_ratio 0.5
bspc config borderless_monocle false
bspc config gapless_monocle false
bspc config remove_unplugged_monitors true
bspc config remove_disabled_monitors true
bspc config top_padding 22
bspc config ignore_ewmh_focus true

xsetroot -cursor_name left_ptr
bspc rule -a '*:floating-terminal' state=floating
bspc rule -a feh state=floating
bspc rule -a URxvt state=floating
bspc rule -a Sxiv state=floating
bspc rule -a my-media-player desktop=^10
bspc rule -a Steam desktop=^3 state=pseudo_tiled
bspc rule -a Zathura state=tiled
bspc rule -a Surf state=tiled
bspc rule -a Wine state=pseudo_tiled
# bspc rule -a zoom state=pseudo_tiled desktop=^3
bspc rule -a zoom desktop=^3
bspc rule -a spotify state=pseudo_tiled rectangle=803x70+0+0
bspc rule -a jetbrains-toolbox state=floating
bspc rule -a jetbrains-idea state=pseudo_tiled
# bspc rule -a discord desktop=^1 state=pseudo_tiled

pkill sxhkd
daemonise sxhkd -r /tmp/sxhkd.log -s /tmp/sxhkd.fifo

bar_args=()
for mon in "${monitors[@]}"; do
    echo "$mon"
    bar_args+=('--bar' "${mon}")
done

pkill lemon
daemonise lemon --tray "${bar_args[@]}"
pkill bspswallow
daemonise ~/.config/bspwm/bspswallow

set +x
retries=0
sleep 1.5
until bar_id=$(xdo id -a 'bar_of_the_lemons') || [[ "$retries" = 1000 ]]; do
    sleep 0.001
    ((retries++))
done
for bar in $bar_id; do
    xdo below -t "$(xdo id -n root)" "$bar"
done
retries=0
until systray_id=$(xdo id -N 'trayer') || [[ "$retries" = 1000 ]]; do
    sleep 0.001
    ((retries++))
done
[[ "$systray_id" ]] && xdo below -t "$(xdo id -n root)" "$systray_id"

# TODO: Disable keybinds in certain programs
F1
    : # fuck help pages

super + Return
  	$TERMINAL

#super + shift + Return
#    if xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) _NET_WM_NAME WM_CLASS | grep -i jetbrains; then \
#        $TERMINAL -e sh -c "cd $(xdotool search JetBrains getwindowname | perl -ne 's/[^\[]*\[([^\]]*)].*$/\1/g and print'); bash"; \
#    else \
#  	    termFromHere; \
#    fi

super + control + Return
    if xprop -id $(xprop -root _NET_ACTIVE_WINDOW | cut -d ' ' -f 5) _NET_WM_NAME WM_CLASS | grep -i jetbrains; then \
        $TERMINAL --class floating-terminal -e sh -c "cd $(xdotool search JetBrains getwindowname | perl -ne 's/[^\[]*\[([^\]]*)].*$/\1/g and print'); bash"; \
    else \
  	    termFromHere --class floating-terminal; \
    fi

super + d
    dmenu_run -l 20

super + shift + f
    $TERMINAL --class floating-terminal,floating-terminal -e f launcher

super + shift + d
  	menu GUI

super + shift + t
    todo gui

super + F9
  	changeMeWall

super + shift + F9
    changeMeWall "$(xclip -sel clip -o)"

super + shift + F9
  	ssh mirrodin bulb/flow.py -s ; changeMeWall

super + F8
  	feh --bg-fill --no-fehbg ~/.local/share/wallpapers/home.png

super + F10
    if [ -e /tmp/.dnd ]; then \
        ssh mirrodin automation/discord/online & \
        rm /tmp/.dnd ; \
    else \
        dunstctl close-all ; \
        ssh mirrodin automation/discord/busy & \
        touch /tmp/.dnd ; \
    fi &>/dev/null ; \
    pkill -10 -x lemon

super + control + m
  	$TERMINAL --class floating-terminal -e pacmixer

super + {F2, F3, F4}
  	{$BROWSER, lightcord, steam}

super + shift + F2
  	$BROWSER -private-window https://duckduckgo.com/

super + m
  	$TERMINAL -e neomutt

super + shift + c
  	$TERMINAL -e ikhal

super + alt + v
    mkdir -p /tmp/vim-anywhere ; \
    file=$(mktemp --tmpdir=/tmp/vim-anywhere) ; \
    bspc rule -a \* -o state=floating; \
    "$TERMINAL" -e nvim -c startinsert "$file" ; \
    [ "$(cat "$file")" ] && xclip -selection c < "$file"

super + w
    desktop="$(xdotool get_desktop)"; \
    win_name="$(xdotool search --desktop "$desktop" . | \
            grep -v "$(xdotool getwindowfocus)" | \
            xargs -I 'X' bash -c "printf '%d	%s\\n' 'X' \"\$(xdotool getwindowname 'X')\"" | \
            column -t -s'	' | \
            dmenu -i -l 10 -p focus | \
            awk -F'	' '\{print $1\}')"; \
    [ "$win_name" ] && xdotool windowactivate "$win_name"


@Print
    snapit

shift + @Print
  	snapit save

super + @Print
    snapit floating

super + control + s
    bspc rule -a \* -o state=floating; \
  	$TERMINAL --class floating-terminal --title floating-terminal -e syncspellbook --hold

super + t
  	$TERMINAL -e htop

super + c
    bspc rule -a \* -o state=floating; \
  	$TERMINAL --class floating-terminal --title floating-terminal -e bc -lq

super + x
    bspc rule -a \* -o state=floating; \
  	$TERMINAL --dimensions 80 25 \
        --class floating-terminal \
        -e bash -c 'echo -e "\e[1m\t\t   C A L E N D A R\e[0m" ;\
                    khal calendar -o ;\
                    read -s -r -n 1'

super + p
  	playClipboard

super + v
    clipmenu

XF86AudioMute
    pactl 'set-sink-mute' @DEFAULT_SINK@ toggle

XF86Audio{Raise,Lower}Volume
	pactl 'set-sink-volume' @DEFAULT_SINK@ {+,-}5%

XF86AudioMicMute
	pactl 'set-source-mute' @DEFAULT_SOURCE@ toggle

super + backslash
  	m gui pause

super + shift + bar
  	m gui quit

super + {minus,plus}
  	m gui {vd,vu} 2

super + {Next,Prior,End,Home}
    m gui {next,prev,next-file,prev-file}

super + {Up,Down}
  	m gui {frwd,back} 60

super + {Right,Left}
  	m gui {frwd,back} 5

super + {Insert,Delete}
  	m gui {current,new-cat}

super + shift + underscore
    bspc rule -a mpv -o state=pseudo_tiled rectangle=820x466; \
    m gui toggle-video


super + BackSpace
  	echo quit | socat - /tmp/mpvalarm

super + comma
    pkill -11 -x lemon

super + F{6,5}
    brightnessctl set {+10,10-}

XF86MonBrightness{Up,Down}
    brightnessctl set {+10,10-}

super + shift + BackSpace
    ssh mirrodin python bulb/let_there_be_light.py

super + control + BackSpace
    ssh mirrodin python bulb/turn_off.py

super + alt + BackSpace
    ssh mirrodin python bulb/let_there_be_light.py confy

super + Pause
    systemctl suspend

super + shift + i
    "$BROWSER" 'https://github.com/issues?q=is%3Aopen+user%3Amendess'

###### bspwm
super + shift + space
    bspc node -t \~floating

super + space
	if bspc query --nodes --node focused.floating; then \
		bspc node last.local.\!floating -f; \
	else \
		bspc node last.local.floating -f; \
	fi

super + f
    bspc node -t \~fullscreen

super + shift + q
    bspc node -c

super + shift + control + q
    bspc node -k

super + shift + {h,j,k,l}
    d='{west:-10 0,south:0 10,north:0 -10,east:10 0}'; \
    if [ -n "$(bspc query -N -n focused.floating)" ]; then \
        bspc node --move $(echo "$d" | cut -d: -f2); \
    else \
        bspc node --swap $(echo "$d" | cut -d: -f1); \
    fi

super + {1-9,0}
	bspc desktop -f ^{1-9,10}

super + shift + {1-9,0}
    bspc node -d '^{1-9,10}' --follow

super + control + {1-9,0}
    bspc node -d '^{1-9,10}'

super + alt + {h,l}
	bspc node --to-monitor {prev,next} --follow

super + shift + F5
    bspc wm --restart ; notify-send -t 500 -u low 'reset done' -a bspwm

alt + Tab
	bspc desktop -f last.occupied

super + {_,shift +} Tab
	bspc desktop -f {next,prev}.local.occupied

super + e
	bspc desktop --layout next

#super + {_,shift +} n
#	bspc desktop --bubble {next,prev}

super + g
	bspc node -s biggest.local

super + shift + e
	bspc node $(bspc query --nodes --desktop | head -1) --equalize

super + r
	bspc node $(bspc query --nodes --desktop | head -1) --circulate forward

super + q ; {h,j,k,l}
	bspc node --presel-dir \~{west,south,north,east}

super + {_,shift +} apostrophe
	bspc node -t {\~pseudo_tiled,tiled}

super + i
	bspc node $(bspc query --nodes --desktop | head -1) -g hidden

super + control + i
	bspc node -g hidden

super + alt + i
    bspc node $(bspc query -N -n .hidden | tail -n1) -g hidden=off

# super + shift + i
#     for n in $(bspc query --nodes); do bspc node $n -g hidden; done

super + shift + o
	echo -e 'i3lock -t -e --image=$HOME/.local/share/wallpapers/home.png\nsystemctl suspend\nreboot\nshutdown now\nssh mirrodin python bulb/turn_off.py;poweroff' | dmenu -nb '#6b0213' -sb '#a8031e' -nf '#FFFFFF' -sf '#FFFFFF' -l 5 | sh

super + shift + r
	bspc node @parent -R 90

super + control + {h,j,k,l}
	dir={(right left -10 0),(bottom top 0 +10),(bottom top 0 -10),(right left +10 0)}; \
    bspc node --resize $\{dir[0]\} $\{dir[2]\} $\{dir[3]\} || bspc node --resize $\{dir[1]\} $\{dir[2]\} $\{dir[3]\}


super + {h,j,k,l}
	dir={(west prev),(south prev),(north next),(east next)}; \
	if bspc query --nodes --node focused.floating; then \
	    bspc node --focus $\{dir[1]\}.floating.local; \
    else \
	    bspc node --focus $\{dir[0]\}".!floating"; \
    fi

#	|| bspc node $(bspc query --nodes --desktop | head -1) --circulate $\{dir[1]\}

super + shift + s
    bspc node -g sticky

super + shift + m
    if marked=$(bspc query -N -n .marked); then \
        bspc node --swap $marked ; \
        bspc node $marked -g 'marked=off' ; \
    else \
        bspc node -g marked ; \
    fi

super + colon
    bspc node --state pseudo_tiled; \
    bspc node --resize bottom_right 50 800

#m
#    case "$((RANDOM % 10))" in 0) mpv ~/.out.mp3 ;; esac ; xdotool key m
